service: social-care-case-viewer-api

variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiGateway:
    apiKeys:
      - secureAccess:
        - api-key-${self:service}-${self:provider.stage}
    usagePlan:
      - secureAccess:
          throttle:
            burstLimit: 200
            rateLimit: 100

package:
  artifact: ./SocialCareCaseViewerApi/bin/release/netcoreapp3.1/social-care-case-viewer-api.zip

functions:
  socialCareCaseViewerApi:
    name: ${self:service}-${self:provider.stage}
    handler: SocialCareCaseViewerApi::SocialCareCaseViewerApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    timeout: 30
    environment:
      CONNECTION_STRING: Host=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-port};Database=social_care;Username=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-username};Password=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-password}
      SCCV_MONGO_CONN_STRING: ${ssm:/social-care-case-viewer-api/${self:provider.stage}/docdb-conn-string}
      SCCV_MONGO_DB_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-name}
      SCCV_MONGO_COLLECTION_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection}
      SCCV_MONGO_COLLECTION_NAME_TEMP: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection-temp}
      RDS_CA_2019: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-public-key}
      HOME: /tmp
      SOCIAL_CARE_FIX_HISTORIC_CASE_NOTE_RESPONSE: ${ssm:/aws/reference/secretsmanager/social_care_case_viewer_api_fix_historic_case_notes_response}
      HISTORICAL_DATA_CONNECTION_STRING: ${ssm:/social-care-case-viewer-api/${self:provider.stage}/historical-data-postgres-conn-string}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
  mongoDBImport:
    name: social-care-case-viewer-mongodb-import-${self:provider.stage}
    handler: MongoDBImport::MongoDBImport.Handler::ImportFormData
    role: lambdaExecutionRole
    memorySize: 4096
    timeout: 900
    package:
      artifact: ./MongoDBImport/bin/release/netcoreapp3.1/mongodb-import.zip
    environment:
      CONNECTION_STRING: Host=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-port};Database=social_care;Username=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-username};Password=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-password}
      SCCV_MONGO_CONN_STRING: ${ssm:/social-care-case-viewer-api/${self:provider.stage}/docdb-conn-string}
      SCCV_MONGO_DB_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-name}
      SCCV_MONGO_COLLECTION_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection}
      SCCV_MONGO_COLLECTION_NAME_TEMP: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection-temp}
      RDS_CA_2019: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-public-key}
      SCCV_MONGO_IMPORT_COLLECTION_NAME: ${ssm:/social-care-docdb-import/${self:provider.stage}/collection-name}
      SCCV_MONGO_IMPORT_FILE_NAME: ${ssm:/social-care-docdb-import/${self:provider.stage}/file-name}
  alertsHandler:
    name: social-care-alerts-handler-${self:provider.stage}
    handler: AlertsHandlerLambda::AlertsHandlerLambda.Handler::FunctionHandler
    role: lambdaExecutionRole
    memorySize: 256
    timeout: 30
    package:
        artifact: ./AlertsHandlerLambda/bin/release/netcoreapp3.1/alerts-handler-lambda.zip
    environment:
        GOOGLE_API_URL: ${ssm:/social-care-alerts-handler/${self:provider.stage}/google-api-url}
        GOOGLE_CHAT_ROOM_PATH: ${ssm:/social-care-alerts-handler/${self:provider.stage}/google-chat-room-path}
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'social-care-application-alerts'
          topicName: social-care-application-alerts

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: allowS3readAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource: 'arn:aws:s3:::${self:custom.mongoDBImportBucket.${self:provider.stage}}/*'

custom:
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-010e5f85b109fd4be
        - sg-0d0aa66ddc2e0fa06
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    mosaic-prod:
      securityGroupIds:
        - sg-0d8739383f0960389
        - sg-0d92164e9f5d53800
        - sg-048f37056608033d3
      subnetIds:
        - subnet-0c39cd286eeaff2b2
        - subnet-04c42d0aafb3738ad
  mongoDBImportBucket:
    staging: mosaic-social-care-csv-staging
    mosaic-prod: social-care-case-viewer-api-qlik-bucket-prod