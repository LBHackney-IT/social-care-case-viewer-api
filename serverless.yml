service: social-care-case-viewer-api
provider:
  name: aws
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./SocialCareCaseViewerApi/bin/release/netcoreapp3.1/social-care-case-viewer-api.zip

functions:
  socialCareCaseViewerApi:
    name: ${self:service}-${self:provider.stage}
    handler: SocialCareCaseViewerApi::SocialCareCaseViewerApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
# TODO: Create ssm variables for this API's postgres mirror then rename base-api below to match api name
      CONNECTION_STRING: Host=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-port};Database=social_care;Username=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-username};Password=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-password}
      SCCV_MONGO_CONN_STRING: ${ssm:/social-care-case-viewer-api/${self:provider.stage}/docdb-conn-string}
      SCCV_MONGO_DB_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-name}
      SCCV_MONGO_COLLECTION_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection}
      SCCV_MONGO_COLLECTION_NAME_TEMP: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection-temp}
      RDS_CA_2019: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-public-key}
      HOME: /tmp
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
  mongoDBImport:
    name: social-care-case-viewer-mongodb-import-${self:provider.stage}
    handler: MongoDBImport::MongoDBImport.Handler::ImportFormData
    role: lambdaExecutionRole
    timeout: 600
    package:
      artifact: ./MongoDBImport/bin/release/netcoreapp3.1/mongodb-import.zip
    environment:
      CONNECTION_STRING: Host=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-port};Database=social_care;Username=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-username};Password=${ssm:/social-care-case-viewer-api/${self:provider.stage}/postgres-password}
      SCCV_MONGO_CONN_STRING: ${ssm:/social-care-case-viewer-api/${self:provider.stage}/docdb-conn-string}
      SCCV_MONGO_DB_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-name}
      SCCV_MONGO_COLLECTION_NAME: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection}
      SCCV_MONGO_COLLECTION_NAME_TEMP: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-collection-temp}
      RDS_CA_2019: ${ssm:/social-care-docdb/${self:provider.stage}/docdb-public-key}
      SCCV_MONGO_IMPORT_COLLECTION_NAME: ${ssm:/social-care-docdb-import/${self:provider.stage}/collection-name}
      SCCV_MONGO_IMPORT_FILE_NAME: ${ssm:/social-care-docdb-import/${self:provider.stage}/file-name}
    #s3 event not added here to simplify the usage of existing buckets
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: allowS3readAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource: 'arn:aws:s3:::${self:custom.mongoDBImportBucket.${self:provider.stage}}/*'
                  
custom:
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-010e5f85b109fd4be
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-00a35603faf7971ad
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
  mongoDBImportBucket:
    staging: qlik-bucket-csv-to-postgres-staging
    production: mosaic-social-care-csv-prod